"""
Strikeline library for the data analysis of the iHIBP scintillator.

Pablo Oyola - pablo.oyola@ipp.mpg.de
"""

import os
import numpy as np
import matplotlib.pyplot as plt
from Lib._Mapping._Common import XYtoPixel
from Lib._Mapping._Calibration import CalParams
import Lib.SimulationCodes.iHIBPsim as ihibpsim
from Lib._Machine import machine
import Lib._Paths as p
pa = p.Path(machine)
del p


class StrikeLine(XYtoPixel):
    """
    This class handles strikeline mapping the scintillator into the variable
    rhopol.
    """

    def __init__(self, path: str=None, shot: int=None, version: int=None):
        """
        Initializes the strikeline class.

        There are two ways to initialize this class:
            - with the path to the file containing the mapping in the scintillator.
            - shot and not version: this will run an iHIBPsim simulation for the
                                    shot with the data retrieved from iHIBP
                                    shotfile.
            - shot and version: this will automatically look for a version
                                of the simulation already done.

        Pablo Oyola - pablo.oyola@ipp.mpg.de

        @param path: filename where the mapping between rhopol -> scint coords
        is stored from an iHIBPsim simulation.
        @param shot: shotnumber to get the strikemap. If not found, this will
        call iHIBPsim to create a new map for the whole shot.
        @param version: if this is provided, it will look for an already
        prepared simulation in the ihibpsim folder with this version.
        """

        ## Init the parent class
        super().__init__()

        ## Setting up dummy data.
        self.y = None
        self.z = None

        ## Retrieve the data of the strikeline.
        self.path = path
        if path is not None:
            if not os.path.isfile(path):
                raise FileNotFoundError('Cannot find the file with the '+
                                        ' strike line data: %s'%path)

            self.load_from_file(path)
        else:
            raise NotImplementedError('Automatic mapping not yet done!')

    def load_from_file(self, path: str):
        """
        This will load the strikemaps from the .map file generated by
        the iHIBPsim code.

        Pablo Oyola - pablo.oyola@ipp.mpg.de

        @param path: path to the file.
        """
        self.mapdata = ihibpsim.strikes.strikeLine(filename=path)

    def plot(self, cal: CalParams, time: float=None, ax=None, **plt_par):
        """
        Plot the strikeline to the given axes and provided a calibration.

        Pablo Oyola - pablo.oyola@ipp.mpg.de

        @param: time point to get the strikeline. If None, an average strikeline
        is used instead.
        @param ax: axes to plot. New ones will be created if not provided.
        """
        ## Check whether there is an axis to plot to.
        ax_was_none = ax is None
        if ax_was_none:
            fig, ax = plt.subplots(1)

        ## Getting the coordinates.
        if time is None:
            # If the time is not provided an average of the data is done.
            self.y = np.zeros_like(self.mapdata.maps[0]['x1'])
            self.z = np.zeros_like(self.mapdata.maps[0]['x1'])

            for ii in range(self.mapdata.size):
                self.y += self.mapdata.maps[0]['x1']
                self.z += self.mapdata.maps[0]['x2']
            self.y /= self.mapdata.size
            self.z /= self.mapdata.size
        else:
            tmax = self.mapdata.time.max()
            tmin = self.mapdata.time.min()
            if (time > tmax) or  (time < tmin):
                   raise Exception('The time is not within the mapping time: '+\
                                   '%.3f not in [%.3f, %.3f] s '%(time, tmin,
                                                                  tmax))
            tidx = np.abs(self.mapdata.time - time).argmin()

            self.y = self.mapdata.maps[tidx]['x1']
            self.z = self.mapdata.maps[tidx]['x2']

        ## Now we call the calibration.
        self.calculate_pixel_coordinates(cal)

        ## Updating the plotting options.
        plt_options = {
            'color': 'w',
            'marker': '',
        }
        plt_options.update(plt_par)

        ## With that, we plot the strikeline.
        line = ax.plot(self.xpixel, self.ypixel, **plt_options)

        return line