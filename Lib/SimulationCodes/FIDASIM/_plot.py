"""Routines to plot the FIDASIM data."""
import numpy as np
import os
import Lib.SimulationCodes.FIDASIM._read as read
import matplotlib.pyplot as plt


def plt_spec(spec: dict = None, filename: str = None):
    """
    Plot FIDASIM spectra

    :param  spec: Dictionary created by read spec,
    :param  filename: name of the FIDASIM file, if you want to read data on the
        fly
    """
    if spec is None:
        spec = read.read_spec(filename)
    plt.plot(spec['lambda'], np.sum(spec['halo'], axis=2)[0, :])
    plt.show()
    return


def plt_neutrals(neutrals: dict = None, grid: dict = None, diag: dict = None,
                 folder: str = None, var: str = 'fdens',
                 plotLOS: bool = False, view: str = 'Toroidal',
                 ax=None):
    """
    Plot FIDASIM neutral density

    :param  neutrals: dictionary generated by read_neutrals, if none, data will
        be read from folder
    :param  grid: dictionary created by read_grid, if none, data will be read
        from folder
    :param  diag: dictionary created by read_diag, if none, data will be read
        from folder
    :param  folder: path to the folder with FIDASIM results
    """
    # if needed, load the data
    if neutrals is None:
        neutrals = read.read_neutrals(os.path.join(folder, 'neutrals.bin'))
    if grid is None:
        grid = read.read_grid(os.path.join(folder, 'grid.bin'))
    if diag is None:
        diag = read.read_diag(os.path.join(folder, 'diag.bin'))
    # if needed create the axis
    if ax is None:
        fig, ax = plt.subplots()
    if view.lower() == 'toroidal' or view.lower() == 'tor':
        ax.contour(grid['xx'][0], grid['yy'][0],
                   np.sum(neutrals[var], axis=(0, 1)))
        if plotLOS:
            for i in range(diag['nchan']):
                plt.plot([diag['xyzlos'][0, i], diag['xyzhead'][0, i]],
                         [[diag['xyzlos'][1, i]], [diag['xyzhead'][1, i]]],
                         'r')
    else:
        raise Exception('Sorry, not yet implemented')
    plt.show()
    return


def plt_profiles(profiles: dict = None, filename: str = None,
                 clr='k', label=''):
    """
    Plot FIDASIM profiles

    :param  filename: name of the profile file
    :param  clr: the color
    :param  label: The label for the line plot
    """
    if profiles is None:
        profiles = read.read_profiles(filename)
    # Temperature
    plt.subplot(221)
    plt.plot(profiles['rho'], profiles['te'], color=clr, label=label)
    plt.plot(profiles['rho'], profiles['ti'], ls='--', color=clr)
    plt.ylabel('Temperature')
    # Density
    plt.subplot(222)
    plt.plot(profiles['rho'], profiles['dene'], color=clr)
    plt.plot(profiles['rho'], profiles['denp'], ls='--', color=clr)
    plt.ylabel('Density')
    # Vtor
    plt.subplot(223)
    plt.plot(profiles['rho'], profiles['vtor'], ls='--', color=clr)
    plt.ylabel('v_tor')
    # Zeff
    plt.subplot(224)
    plt.plot(profiles['rho'], profiles['zeff'], ls='--', color=clr)
    plt.ylabel('z_eff')
    return


def plt_fida(fida: dict = None, filename: str = None):
    """
    Plot FIDA spectrum

    :param  filename: name of the folder with FIDASIM fida data
    """
    if fida is None:
        fida = read.read_fida(filename)
    plt.plot(fida['lambda'], np.sum(fida['afida'], axis=2)[0, :])
    plt.show()
    return


def plt_grid(grid: dict = None, filename: str = None, view='tor',
             clr='red', alpha=1.0):
    """
    Plot FIDASIM grid

    :param  filename: name of the folder with FIDASIM grid
    """
    if grid is None:
        grid = read.read_grid(filename)

    if (view.lower() == 'tor') or (view.lower() == 'toroidal'):
        (xmin, xmax, ymin, ymax) =\
            (grid['xmin'], grid['xmax'], grid['ymin'], grid['ymax'])
        (xmin, xmax, ymin, ymax) = (xmin*0.01, xmax*0.01, ymin*0.01, ymax*0.01)
        plt.plot([xmin, xmin], [ymin, ymax], color=clr, alpha=alpha)
        plt.plot([xmax, xmax], [ymin, ymax], color=clr, alpha=alpha)
        plt.plot([xmin, xmax], [ymin, ymin], color=clr, alpha=alpha)
        plt.plot([xmin, xmax], [ymax, ymax], color=clr, alpha=alpha)
    elif (view.lower() == 'pol') or (view.lower() == 'poloidal'):
        (rmin, rmax, zmin, zmax) =\
            (grid['rmin'], grid['rmax'], grid['zmin'], grid['zmax'])
        (rmin, rmax, zmin, zmax) = (rmin*0.01, rmax*0.01, zmin*0.01, zmax*0.01)
        plt.plot([rmin, rmin], [zmin, zmax], color=clr, alpha=alpha)
        plt.plot([rmax, rmax], [zmin, zmax], color=clr, alpha=alpha)
        plt.plot([rmin, rmax], [zmin, zmin], color=clr, alpha=alpha)
        plt.plot([rmin, rmax], [zmax, zmax], color=clr, alpha=alpha)
    return
